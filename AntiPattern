public class BookManager {

    
    private List<Book> books;
    private BookDisplay display; // removed UI varuable 
    
    public BookManager() {
        books = new ArrayList<>();
        ui = new UI();
    }
    
    public void addBook(Book book) {
        books.add(book);
    }
    
    public void removeBook(Book book) {
        books.remove(book);
    }
    
    public void displayBooks() {
        // this method has been refactored to follow the single responsibility principle
        
        for (Book book : books) {
            ui.printBookDetails(book);
        }
        ui.waitForInput();
    }
    
    public void searchBook(String title) {
        for (Book book : books) {
            if (book.getTitle().equalsIgnoreCase(title)) {
                ui.printBookDetails(book);
            }
        }
    }
    
    // Golden Hammer anti-pattern: using a single class for all UI elements
    // regardless of their purpose
    
    private class UI {
        public void clearScreen() {
            // code to clear the screen
        }
        
        public void printHeader(String text) {
            // code to print a header
        }
        
        public void printBookDetails(Book book) {
            // code to print book details
        }
        
        public void waitForInput() {
            // code to wait for user input
        }
        
        public void showMessage(String message) {
            // code to show a message
        }
        
        public void showError(String error) {
            // code to show an error message
        }
        
        public String getInput() {
            // code to get user input
            return null;
        }
    }
}
